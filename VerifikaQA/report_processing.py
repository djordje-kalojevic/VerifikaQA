"""This submodule contains functions for processing and manipulating Verifika reports.

Verifika is a language tool for proofreading and quality assurance of written text.
The reports generated by Verifika may contain a large number of sheets
with various types of errors and warnings found in the processed text.
This module aims to help the user manage and analyze the report data more efficiently
by removing any sheets that contain only Verifika sheet headers,
as these sheets do not contain any errors,
as well as any sheets that contain errors the user is not interested in checking.
It then saves the modified report to a new file."""

from os import system, remove
from pathlib import Path
from PyQt6.QtWidgets import QFileDialog, QMessageBox
from openpyxl.workbook import Workbook
from openpyxl import load_workbook


def process_report(files_dir: Path, error_types: list[str],
                   manual_report: bool) -> None:
    """Processes the Verifika report by removing empty sheets, and saves the report to a new file.

    Args:
        - temp_report (Path): Path to the Verifika report file to process.
        - error_types (list[str]): A list of error types user would like to check for.
        - manual_report (bool): Indication on whether manual optimization is requested.

    Note:
        This function removes sheets that contain only Verifika sheet headers,
        as these sheets do not contain any errors."""

    temp_report = Path(files_dir, "temp_report.xlsx")

    if not temp_report.is_file() and not manual_report:
        QMessageBox.information(None, "No report saved",
                                "No errors were found.")
        return

    verifika_wb = load_workbook(temp_report, read_only=False)

    try:
        remove(temp_report)
    except OSError:
        pass

    _remove_empty_sheets(verifika_wb, error_types)
    _handle_report(verifika_wb, files_dir)


def _remove_empty_sheets(verifika_wb: Workbook,
                         error_types: list[str]) -> None:
    """Removes empty sheets from the Verifika report workbook that are not included in the
    list of error types user has selected to check for.

    Args:
        - verifika_wb (Workbook): The Verifika report workbook.
        - error_types (list[str]): A list of error types user would like to check for.

    Note:
        This function removes sheets that only contain Verifika sheet headers,
        as these sheets contain no useful information.
        Additionally, if a "Full" report was not requested,
        report will be optimized by removing sheets that the user has not requested."""

    for sheet_name in verifika_wb.sheetnames:
        if verifika_wb[sheet_name].max_row < 12:
            verifika_wb.remove(verifika_wb[sheet_name])

    if "Full Report" not in error_types:
        for sheet_name in verifika_wb.sheetnames:
            if sheet_name not in error_types:
                verifika_wb.remove(verifika_wb[sheet_name])


def _handle_report(verifika_wb: Workbook, files_dir: Path) -> None:
    """Saves the processed Verifika report to a new file.

    Args:
        - verifika_wb (Workbook): The processed Verifika report workbook.
        - temp_report_name (Path): Path to the temporary Verifika report file."""

    if not verifika_wb.sheetnames:
        return

    while True:
        try:
            report, _ = QFileDialog.getSaveFileName(
                caption="Save QA Report",
                directory=str(files_dir),
                filter="Excel file (*.xlsx)")

            if not report:
                return

        except PermissionError:
            QMessageBox.critical(None, "Error occurred!",
                                 ("File could not be saved, "
                                  "it is likely opened by another process "
                                  "(most likely Excel or another reader). "
                                  "Please close it before continuing."))

        else:
            verifika_wb.save(report)
            answer = QMessageBox.question(
                None, "Report saved", ("Would like to open it?"),
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)

            if answer == "StandardButton.Yes":
                system(f'"{report}"')
